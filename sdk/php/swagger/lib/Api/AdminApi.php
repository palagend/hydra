<?php
/**
 * AdminApi
 * PHP version 5
 *
 * @category Class
 * @package  HydraSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ORY Hydra
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HydraSDK\Api;

use \HydraSDK\ApiClient;
use \HydraSDK\ApiException;
use \HydraSDK\Configuration;
use \HydraSDK\ObjectSerializer;

/**
 * AdminApi Class Doc Comment
 *
 * @category Class
 * @package  HydraSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminApi
{
    /**
     * API Client
     *
     * @var \HydraSDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \HydraSDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\HydraSDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \HydraSDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \HydraSDK\ApiClient $apiClient set the API client
     *
     * @return AdminApi
     */
    public function setApiClient(\HydraSDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation acceptConsentRequest
     *
     * Accept an consent request
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @param \HydraSDK\Model\AcceptConsentRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\CompletedRequest
     */
    public function acceptConsentRequest($consent_challenge, $body = null)
    {
        list($response) = $this->acceptConsentRequestWithHttpInfo($consent_challenge, $body);
        return $response;
    }

    /**
     * Operation acceptConsentRequestWithHttpInfo
     *
     * Accept an consent request
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @param \HydraSDK\Model\AcceptConsentRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptConsentRequestWithHttpInfo($consent_challenge, $body = null)
    {
        // verify the required parameter 'consent_challenge' is set
        if ($consent_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consent_challenge when calling acceptConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($consent_challenge !== null) {
            $queryParams['consent_challenge'] = $this->apiClient->getSerializer()->toQueryValue($consent_challenge);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\CompletedRequest',
                '/oauth2/auth/requests/consent/accept'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation acceptLoginRequest
     *
     * Accept an login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @param \HydraSDK\Model\AcceptLoginRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\CompletedRequest
     */
    public function acceptLoginRequest($login_challenge, $body = null)
    {
        list($response) = $this->acceptLoginRequestWithHttpInfo($login_challenge, $body);
        return $response;
    }

    /**
     * Operation acceptLoginRequestWithHttpInfo
     *
     * Accept an login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @param \HydraSDK\Model\AcceptLoginRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptLoginRequestWithHttpInfo($login_challenge, $body = null)
    {
        // verify the required parameter 'login_challenge' is set
        if ($login_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login_challenge when calling acceptLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($login_challenge !== null) {
            $queryParams['login_challenge'] = $this->apiClient->getSerializer()->toQueryValue($login_challenge);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\CompletedRequest',
                '/oauth2/auth/requests/login/accept'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation acceptLogoutRequest
     *
     * Accept a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\CompletedRequest
     */
    public function acceptLogoutRequest($logout_challenge)
    {
        list($response) = $this->acceptLogoutRequestWithHttpInfo($logout_challenge);
        return $response;
    }

    /**
     * Operation acceptLogoutRequestWithHttpInfo
     *
     * Accept a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptLogoutRequestWithHttpInfo($logout_challenge)
    {
        // verify the required parameter 'logout_challenge' is set
        if ($logout_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $logout_challenge when calling acceptLogoutRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/logout/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);

        // query params
        if ($logout_challenge !== null) {
            $queryParams['logout_challenge'] = $this->apiClient->getSerializer()->toQueryValue($logout_challenge);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\CompletedRequest',
                '/oauth2/auth/requests/logout/accept'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createJsonWebKeySet
     *
     * Generate a new JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JsonWebKeySetGeneratorRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\JSONWebKeySet
     */
    public function createJsonWebKeySet($set, $body = null)
    {
        list($response) = $this->createJsonWebKeySetWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation createJsonWebKeySetWithHttpInfo
     *
     * Generate a new JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JsonWebKeySetGeneratorRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\JSONWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJsonWebKeySetWithHttpInfo($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling createJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\JSONWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\JSONWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\JSONWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOAuth2Client
     *
     * Create an OAuth 2.0 client
     *
     * Client for Hydra
     *
     * @param \HydraSDK\Model\OAuth2Client $body  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\OAuth2Client
     */
    public function createOAuth2Client($body)
    {
        list($response) = $this->createOAuth2ClientWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOAuth2ClientWithHttpInfo
     *
     * Create an OAuth 2.0 client
     *
     * Client for Hydra
     *
     * @param \HydraSDK\Model\OAuth2Client $body  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOAuth2ClientWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\OAuth2Client',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKey
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteJsonWebKey($kid, $set)
    {
        list($response) = $this->deleteJsonWebKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation deleteJsonWebKeyWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeyWithHttpInfo($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling deleteJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/keys/{set}/{kid}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeySet
     *
     * Delete a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteJsonWebKeySet($set)
    {
        list($response) = $this->deleteJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation deleteJsonWebKeySetWithHttpInfo
     *
     * Delete a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeySetWithHttpInfo($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/keys/{set}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOAuth2Client
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteOAuth2Client($id)
    {
        list($response) = $this->deleteOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOAuth2ClientWithHttpInfo
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/clients/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flushInactiveOAuth2Tokens
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * Client for Hydra
     *
     * @param \HydraSDK\Model\FlushInactiveOAuth2TokensRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function flushInactiveOAuth2Tokens($body = null)
    {
        list($response) = $this->flushInactiveOAuth2TokensWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation flushInactiveOAuth2TokensWithHttpInfo
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * Client for Hydra
     *
     * @param \HydraSDK\Model\FlushInactiveOAuth2TokensRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function flushInactiveOAuth2TokensWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/oauth2/flush";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/flush'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConsentRequest
     *
     * Get consent request information
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\ConsentRequest
     */
    public function getConsentRequest($consent_challenge)
    {
        list($response) = $this->getConsentRequestWithHttpInfo($consent_challenge);
        return $response;
    }

    /**
     * Operation getConsentRequestWithHttpInfo
     *
     * Get consent request information
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\ConsentRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsentRequestWithHttpInfo($consent_challenge)
    {
        // verify the required parameter 'consent_challenge' is set
        if ($consent_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consent_challenge when calling getConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($consent_challenge !== null) {
            $queryParams['consent_challenge'] = $this->apiClient->getSerializer()->toQueryValue($consent_challenge);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\ConsentRequest',
                '/oauth2/auth/requests/consent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\ConsentRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\ConsentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJsonWebKey
     *
     * Fetch a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\JSONWebKeySet
     */
    public function getJsonWebKey($kid, $set)
    {
        list($response) = $this->getJsonWebKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation getJsonWebKeyWithHttpInfo
     *
     * Fetch a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\JSONWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeyWithHttpInfo($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling getJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\JSONWebKeySet',
                '/keys/{set}/{kid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\JSONWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\JSONWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeySet
     *
     * Retrieve a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\JSONWebKeySet
     */
    public function getJsonWebKeySet($set)
    {
        list($response) = $this->getJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation getJsonWebKeySetWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\JSONWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeySetWithHttpInfo($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\JSONWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\JSONWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\JSONWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLoginRequest
     *
     * Get an login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\LoginRequest
     */
    public function getLoginRequest($login_challenge)
    {
        list($response) = $this->getLoginRequestWithHttpInfo($login_challenge);
        return $response;
    }

    /**
     * Operation getLoginRequestWithHttpInfo
     *
     * Get an login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\LoginRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginRequestWithHttpInfo($login_challenge)
    {
        // verify the required parameter 'login_challenge' is set
        if ($login_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login_challenge when calling getLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($login_challenge !== null) {
            $queryParams['login_challenge'] = $this->apiClient->getSerializer()->toQueryValue($login_challenge);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\LoginRequest',
                '/oauth2/auth/requests/login'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\LoginRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\LoginRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLogoutRequest
     *
     * Get a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\LogoutRequest
     */
    public function getLogoutRequest($logout_challenge)
    {
        list($response) = $this->getLogoutRequestWithHttpInfo($logout_challenge);
        return $response;
    }

    /**
     * Operation getLogoutRequestWithHttpInfo
     *
     * Get a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\LogoutRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLogoutRequestWithHttpInfo($logout_challenge)
    {
        // verify the required parameter 'logout_challenge' is set
        if ($logout_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $logout_challenge when calling getLogoutRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/logout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);

        // query params
        if ($logout_challenge !== null) {
            $queryParams['logout_challenge'] = $this->apiClient->getSerializer()->toQueryValue($logout_challenge);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\LogoutRequest',
                '/oauth2/auth/requests/logout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\LogoutRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\LogoutRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOAuth2Client
     *
     * Get an OAuth 2.0 Client.
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\OAuth2Client
     */
    public function getOAuth2Client($id)
    {
        list($response) = $this->getOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOAuth2ClientWithHttpInfo
     *
     * Get an OAuth 2.0 Client.
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation introspectOAuth2Token
     *
     * Introspect OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \&quot;refresh_token\&quot; value returned. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\OAuth2TokenIntrospection
     */
    public function introspectOAuth2Token($token, $scope = null)
    {
        list($response) = $this->introspectOAuth2TokenWithHttpInfo($token, $scope);
        return $response;
    }

    /**
     * Operation introspectOAuth2TokenWithHttpInfo
     *
     * Introspect OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \&quot;refresh_token\&quot; value returned. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\OAuth2TokenIntrospection, HTTP status code, HTTP response headers (array of strings)
     */
    public function introspectOAuth2TokenWithHttpInfo($token, $scope = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling introspectOAuth2Token');
        }
        // parse inputs
        $resourcePath = "/oauth2/introspect";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\OAuth2TokenIntrospection',
                '/oauth2/introspect'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\OAuth2TokenIntrospection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\OAuth2TokenIntrospection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOAuth2Clients
     *
     * List OAuth 2.0 Clients
     *
     * Client for Hydra
     *
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\OAuth2Client[]
     */
    public function listOAuth2Clients($limit = null, $offset = null)
    {
        list($response) = $this->listOAuth2ClientsWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation listOAuth2ClientsWithHttpInfo
     *
     * List OAuth 2.0 Clients
     *
     * Client for Hydra
     *
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\OAuth2Client[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOAuth2ClientsWithHttpInfo($limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\OAuth2Client[]',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\OAuth2Client[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\OAuth2Client[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSubjectConsentSessions
     *
     * Lists all consent sessions of a subject
     *
     * Client for Hydra
     *
     * @param string $subject  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\PreviousConsentSession[]
     */
    public function listSubjectConsentSessions($subject)
    {
        list($response) = $this->listSubjectConsentSessionsWithHttpInfo($subject);
        return $response;
    }

    /**
     * Operation listSubjectConsentSessionsWithHttpInfo
     *
     * Lists all consent sessions of a subject
     *
     * Client for Hydra
     *
     * @param string $subject  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\PreviousConsentSession[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listSubjectConsentSessionsWithHttpInfo($subject)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling listSubjectConsentSessions');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/sessions/consent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\PreviousConsentSession[]',
                '/oauth2/auth/sessions/consent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\PreviousConsentSession[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\PreviousConsentSession[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectConsentRequest
     *
     * Reject an consent request
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\CompletedRequest
     */
    public function rejectConsentRequest($consent_challenge, $body = null)
    {
        list($response) = $this->rejectConsentRequestWithHttpInfo($consent_challenge, $body);
        return $response;
    }

    /**
     * Operation rejectConsentRequestWithHttpInfo
     *
     * Reject an consent request
     *
     * Client for Hydra
     *
     * @param string $consent_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectConsentRequestWithHttpInfo($consent_challenge, $body = null)
    {
        // verify the required parameter 'consent_challenge' is set
        if ($consent_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consent_challenge when calling rejectConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($consent_challenge !== null) {
            $queryParams['consent_challenge'] = $this->apiClient->getSerializer()->toQueryValue($consent_challenge);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\CompletedRequest',
                '/oauth2/auth/requests/consent/reject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectLoginRequest
     *
     * Reject a login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\CompletedRequest
     */
    public function rejectLoginRequest($login_challenge, $body = null)
    {
        list($response) = $this->rejectLoginRequestWithHttpInfo($login_challenge, $body);
        return $response;
    }

    /**
     * Operation rejectLoginRequestWithHttpInfo
     *
     * Reject a login request
     *
     * Client for Hydra
     *
     * @param string $login_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectLoginRequestWithHttpInfo($login_challenge, $body = null)
    {
        // verify the required parameter 'login_challenge' is set
        if ($login_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login_challenge when calling rejectLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($login_challenge !== null) {
            $queryParams['login_challenge'] = $this->apiClient->getSerializer()->toQueryValue($login_challenge);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\CompletedRequest',
                '/oauth2/auth/requests/login/reject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectLogoutRequest
     *
     * Reject a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function rejectLogoutRequest($logout_challenge, $body = null)
    {
        list($response) = $this->rejectLogoutRequestWithHttpInfo($logout_challenge, $body);
        return $response;
    }

    /**
     * Operation rejectLogoutRequestWithHttpInfo
     *
     * Reject a logout request
     *
     * Client for Hydra
     *
     * @param string $logout_challenge  (required)
     * @param \HydraSDK\Model\RejectRequest $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectLogoutRequestWithHttpInfo($logout_challenge, $body = null)
    {
        // verify the required parameter 'logout_challenge' is set
        if ($logout_challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $logout_challenge when calling rejectLogoutRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/logout/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);

        // query params
        if ($logout_challenge !== null) {
            $queryParams['logout_challenge'] = $this->apiClient->getSerializer()->toQueryValue($logout_challenge);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/auth/requests/logout/reject'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeAuthenticationSession
     *
     * Invalidates all login sessions of a certain user Invalidates a subject's authentication session
     *
     * Client for Hydra
     *
     * @param string $subject  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function revokeAuthenticationSession($subject)
    {
        list($response) = $this->revokeAuthenticationSessionWithHttpInfo($subject);
        return $response;
    }

    /**
     * Operation revokeAuthenticationSessionWithHttpInfo
     *
     * Invalidates all login sessions of a certain user Invalidates a subject's authentication session
     *
     * Client for Hydra
     *
     * @param string $subject  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeAuthenticationSessionWithHttpInfo($subject)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling revokeAuthenticationSession');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/sessions/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/auth/sessions/login'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeConsentSessions
     *
     * Revokes consent sessions of a subject for a specific OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return void
     */
    public function revokeConsentSessions($subject, $client = null)
    {
        list($response) = $this->revokeConsentSessionsWithHttpInfo($subject, $client);
        return $response;
    }

    /**
     * Operation revokeConsentSessionsWithHttpInfo
     *
     * Revokes consent sessions of a subject for a specific OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeConsentSessionsWithHttpInfo($subject, $client = null)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subject when calling revokeConsentSessions');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/sessions/consent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }
        // query params
        if ($client !== null) {
            $queryParams['client'] = $this->apiClient->getSerializer()->toQueryValue($client);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/auth/sessions/consent'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKey
     *
     * Update a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JSONWebKey $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\JSONWebKey
     */
    public function updateJsonWebKey($kid, $set, $body = null)
    {
        list($response) = $this->updateJsonWebKeyWithHttpInfo($kid, $set, $body);
        return $response;
    }

    /**
     * Operation updateJsonWebKeyWithHttpInfo
     *
     * Update a JSON Web Key
     *
     * Client for Hydra
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JSONWebKey $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\JSONWebKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeyWithHttpInfo($kid, $set, $body = null)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling updateJsonWebKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJsonWebKey');
        }
        // parse inputs
        $resourcePath = "/keys/{set}/{kid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                "{" . "kid" . "}",
                $this->apiClient->getSerializer()->toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\JSONWebKey',
                '/keys/{set}/{kid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\JSONWebKey', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\JSONWebKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKeySet
     *
     * Update a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JSONWebKeySet $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\JSONWebKeySet
     */
    public function updateJsonWebKeySet($set, $body = null)
    {
        list($response) = $this->updateJsonWebKeySetWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation updateJsonWebKeySetWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * Client for Hydra
     *
     * @param string $set The set (required)
     * @param \HydraSDK\Model\JSONWebKeySet $body  (optional)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\JSONWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeySetWithHttpInfo($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJsonWebKeySet');
        }
        // parse inputs
        $resourcePath = "/keys/{set}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                "{" . "set" . "}",
                $this->apiClient->getSerializer()->toPathValue($set),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\JSONWebKeySet',
                '/keys/{set}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\JSONWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\JSONWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOAuth2Client
     *
     * Update an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id  (required)
     * @param \HydraSDK\Model\OAuth2Client $body  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return \HydraSDK\Model\OAuth2Client
     */
    public function updateOAuth2Client($id, $body)
    {
        list($response) = $this->updateOAuth2ClientWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateOAuth2ClientWithHttpInfo
     *
     * Update an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id  (required)
     * @param \HydraSDK\Model\OAuth2Client $body  (required)
     * @throws \HydraSDK\ApiException on non-2xx response
     * @return array of \HydraSDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOAuth2ClientWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateOAuth2Client');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\HydraSDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\HydraSDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\HydraSDK\Model\GenericError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
